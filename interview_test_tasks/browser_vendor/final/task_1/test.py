#! /usr/bin/python
"""Unit-tests for task #1."""

import unittest
from common.custom_test_case import TestNothing
from connected_areas import mark_largest_areas


class TestConnectedAreas(TestNothing):
    """Test for:
    [#1] Connected areas.
    """

    def test_5x4(self):
        m = [ [1, 0, 1, 0, 1], # One largest area or size 8.
              [1, 1, 1, 0, 0],
              [0, 1, 0, 1, 0],
              [0, 1, 0, 0, 0], ]

        m = mark_largest_areas(m)

        self.assertEqual(m, [ [2, 0, 2, 0, 1],
                              [2, 2, 2, 0, 0],
                              [0, 2, 0, 2, 0],
                              [0, 2, 0, 0, 0], ])
    def test_10x10(self):
        m = [ [0, 1, 0, 1, 1, 0, 0, 0, 1, 0,], # One largest area (snake)
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 1,], # of size 21
              [0, 0, 1, 1, 1, 1, 1, 1, 0, 0,],
              [0, 0, 0, 0, 0, 0, 0, 0, 1, 0,],
              [1, 0, 0, 1, 1, 1, 1, 0, 1, 0,],
              [1, 0, 1, 0, 0, 0, 0, 0, 1, 0,],
              [0, 0, 1, 0, 0, 0, 0, 0, 1, 0,],
              [0, 0, 0, 1, 1, 1, 1, 1, 0, 0,],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],
              [1, 1, 0, 1, 0, 1, 0, 1, 0, 1,], ]

        m = mark_largest_areas(m)

        self.assertEqual(m, [ [0, 1, 0, 1, 1, 0, 0, 0, 1, 0,],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],
                              [0, 0, 2, 2, 2, 2, 2, 2, 0, 0,],
                              [0, 0, 0, 0, 0, 0, 0, 0, 2, 0,],
                              [1, 0, 0, 2, 2, 2, 2, 0, 2, 0,],
                              [1, 0, 2, 0, 0, 0, 0, 0, 2, 0,],
                              [0, 0, 2, 0, 0, 0, 0, 0, 2, 0,],
                              [0, 0, 0, 2, 2, 2, 2, 2, 0, 0,],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],
                              [1, 1, 0, 1, 0, 1, 0, 1, 0, 1,], ])

    def test_11x11_filled(self):
        m = [ [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], # All cell = 1, 121 cells
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ]

        m = mark_largest_areas(m)

        self.assertEqual(m, [ [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                              [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], ])

    def test_20x20(self):
        # 3 larges areas of size 21 each.
        m = [ [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
              [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0],
              [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
              [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0],
              [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], ]

        m = mark_largest_areas(m)

        self.assertEqual(m, [
              [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
              [0, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0],
              [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0],
              [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0],
              [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0],
              [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0],
              [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0],
              [0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0],
              [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0],
              [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0],
              [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0],
              [0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0],
              [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0],
              [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 0, 0],
              [0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], ])


if __name__ == '__main__':
    unittest.main()
